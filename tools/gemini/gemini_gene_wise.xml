<tool id="gemini_@BINARY@" name="GEMINI @BINARY@" version="@VERSION@.0">
    <description>Querying the GEMINI database</description>
    <macros>
        <import>gemini_macros.xml</import>
        <token name="@BINARY@">gene_wise</token>
    </macros>
    <expand macro="requirements" />
    <expand macro="stdio" />
    <expand macro="version_command" />
    <command>
<![CDATA[
        gemini @BINARY@

            
            #if int($min_filters) > 0:
                --min_filters $min_filters
            #end if

            #if $gt_filter.strip():
                --gt-filter "${gt_filter}"
            #end if

            #if $report.report_selector != 'all':
                --columns "${report.columns}"
            #end if

            @CMDLN_SQL_FILTER_FILTER_OPTION@

            "${ infile }"
            > "${ outfile }"
]]>
    </command>
    <inputs>
        <expand macro="infile" />

        <param name="gt_filter" type="text" area="True" size="5x50" label="Restrictions to apply to genotype values" help="(--gt-filter)">
            <expand macro="sanitize_query" />
        </param>
        <param name="min_filters" type="integer" value="0" label="Minimum number of filters" help="(--min-filters)">
            <validator type="in_range" min="0"/>
        </param>

        <expand macro="column_filter" />
        <expand macro="filter" />


    </inputs>
    <outputs>
        <data name="outfile" format="tabular" />
    </outputs>
    <tests>
        <test>
            <param name="infile" value="gemini_amend_input.db" ftype="gemini.sqlite" />
            <param name="gt_filter" value="((gt_depths).(*).(>=1).(all))" />
            <output name="outfile" file="gemini_gene_wise_result.tabular" />
        </test>
    </tests>
    <help>
<![CDATA[
**What it does**

This tool is similar to GEMINI query. It has fewer options and orders the results by gene name.
]]>
    </help>
    <expand macro="citations"/>
</tool>
