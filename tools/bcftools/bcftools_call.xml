<?xml version='1.0' encoding='utf-8'?>
<tool name="bcftools @EXECUTABLE@" id="bcftools_@EXECUTABLE@" version="@VERSION@.0">
  <description>SNP/indel variant calling from VCF/BCF</description>
  <macros>
    <token name="@EXECUTABLE@">call</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements" />
  <expand macro="stdio" />
  <expand macro="version_command" />
  <command>bcftools @EXECUTABLE@

## Consensus/variant calling section

${sec_consensus_variant_calling.consensus_caller}
#if $sec_consensus_variant_calling.constrain:
  --constrain "${sec_consensus_variant_calling.constrain}"
#end if
${sec_consensus_variant_calling.multiallelic_caller}
#if $sec_consensus_variant_calling.novel_rate:
  --novel-rate "${sec_consensus_variant_calling.novel_rate}"
#end if
#if $sec_consensus_variant_calling.pval_threshold:
  --pval-threshold "${sec_consensus_variant_calling.pval_threshold}"
#end if
#if $sec_consensus_variant_calling.prior:
  --prior "${sec_consensus_variant_calling.prior}"
#end if
${sec_consensus_variant_calling.chromosome_X}
${sec_consensus_variant_calling.chromosome_Y}

## File format section
#if $sec_file_format.output:
  --output "${sec_file_format.output}"
#end if
#if str($sec_file_format.select_output_type) != "__none__":
  --output-type "${sec_file_format.select_output_type}"
#end if
#set values_sec_file_format_regions = '","'.join([str($value) for $value in $sec_file_format.regions_repeat])
#if $values_sec_file_format_regions:
  --regions "${values_sec_file_format_regions}"
#end if
#if $sec_file_format.regions_file:
  --regions-file "${sec_file_format.regions_file}"
#end if
#set values_sec_file_format_samples = '","'.join([str($value) for $value in $sec_file_format.samples_repeat])
#if $values_sec_file_format_samples:
  --samples "${values_sec_file_format_samples}"
#end if
#if $sec_file_format.samples_file:
  --samples-file "${sec_file_format.samples_file}"
#end if
#set values_sec_file_format_targets = '","'.join([str($value) for $value in $sec_file_format.targets_repeat])
#if $values_sec_file_format_targets:
  --targets "${values_sec_file_format_targets}"
#end if
#if $sec_file_format.targets_file:
  --targets-file "${sec_file_format.targets_file}"
#end if

## Input/output section
${sec_input_output.keep_alts}
#set values_sec_input_output_format_fields = '","'.join([str($value) for $value in $sec_input_output.format_fields_repeat])
#if $values_sec_input_output_format_fields:
  --format-fields "${values_sec_input_output_format_fields}"
#end if
#if $sec_input_output.gvcf:
  --gvcf "${sec_input_output.gvcf}"
#end if
${sec_input_output.insert_missed}
${sec_input_output.keep_masked_ref}
#if $sec_input_output.skip_variants:
  --skip-variants "${sec_input_output.skip_variants}"
#end if
${sec_input_output.variants_only}

## Primary Input/Outputs

$input_file
&gt;
$output_file</command>
  <inputs>
    <param name="input_file" label="VCF/BCF Data" type="data" format="vcf,bcf,vcf_bgz,bcf_bgz" />
    <section name="sec_consensus_variant_calling" expanded="true" title="Consensus/variant calling Options">
        <conditional name="caller" label="Calling Options">
          <param name="select_caller" label="Calling Method" type="select">
            <option value="consensus">the original calling method (--consensus-caller)</option>
            <option value="multiallelic">alternative model for multiallelic and rare-variant calling (--multiallelic-caller)</option>
          </param>
          <when value="consensus">
          </when>
          <when value="multiallelic">
          </when>
      </conditional>

          <conditional name="constraints" label="Constraints">
          <param name="constrain_select" label="Constraints" type="select">
              <option value="__none__" selected="True">No constraints</option>
              <option value="alleles">call genotypes given alleles (alleles)</option>
              <option value="trio">call genotypes given the father-mother-child constraint (trio)</option>
          </param>
          <when value="__none__" />
          <when value="alleles">
          </when>
          <when value="trio">
              <param label="Novel Rate: SNPs" type="float" default="1e-8" optional="True" help="mutation rate of SNPs" />
              <param label="Novel Rate: Insertions" type="float" default="1e-9" optional="True" help="mutation rate of insertions according to their length" />
              <param label="Novel Rate: Deletions" type="float" default="1e-9" optional="True" help="mutation rate of deletions according to their length" />

              <param name="pval_threshold" label="Pval Threshold" type="float" default="0.5" optional="True" help="variant if P(ref|D)&lt;FLOAT with -c" />
          </when>
      </conditional>
      <param name="prior" label="Prior" type="float" default="1.1e-3" optional="True" help="mutation rate (use bigger for greater sensitivity)" />

      <param name="chromosome_X" label="Chromosome X" type="boolean" truevalue="--chromosome-X" falsevalue="" help="haploid output for male samples (requires PED file with -s)" />
      <param name="chromosome_Y" label="Chromosome Y" type="boolean" truevalue="--chromosome-Y" falsevalue="" help="haploid output for males and skips females (requires PED file with -s)" />
    </section>
    <section name="sec_file_format" expanded="true" title="File format Options">
      <expand macro="macro_select_output_type" />
      <expand macro="macro_regions" />
      <expand macro="macro_samples_repeat" />
      <param name="samples_file" label="Samples File" type="data" format="data" optional="True" help="PED file or a file with optional second column for ploidy (0, 1 or 2) [all samples]" />
      <expand macro="macro_targets" />
    </section>
    <section name="sec_input_output" expanded="true" title="Input/output Options">
      <param name="keep_alts" label="Keep Alts" type="boolean" truevalue="--keep-alts" falsevalue="" help="keep all possible alternate alleles at variant sites" />
      <repeat name="format_fields_repeat" title="Format Fields">
        <param name="format_fields" label="Format Fields" help="output format fields: GQ,GP (lowercase allowed) []" />
      </repeat>
      <param name="gvcf" label="Gvcf" __TODO__="TODO" help="output gVCF blocks of homozygous REF calls" />
      <param name="insert_missed" label="Insert Missed" type="boolean" truevalue="--insert-missed" falsevalue="" help="output also sites missed by mpileup but present in -T" />
      <param name="keep_masked_ref" label="Keep Masked Ref" type="boolean" truevalue="--keep-masked-ref" falsevalue="" help="keep sites with masked reference allele (REF=N)" />
      <param name="skip_variants" label="Skip Variants" __TODO__="TODO" help="skip indels/snps" />
      <param name="variants_only" label="Variants Only" type="boolean" truevalue="--variants-only" falsevalue="" help="output variant sites only" />
    </section>
  </inputs>
  <outputs>
    <data name="output_file" format="vcf">
      <change_format>
        <when input="sec_file_format|select_output_type" value="b" format="bcf_bgz" />
        <when input="sec_file_format|select_output_type" value="u" format="bcf" />
        <when input="sec_file_format|select_output_type" value="z" format="vcf_bgz" />
        <when input="sec_file_format|select_output_type" value="v" format="vcf" />
      </change_format>
    </data>
  </outputs>
  <tests />
  <help>SNP/indel variant calling from VCF/BCF. To be used in conjunction with samtools mpileup. This command replaces the former "bcftools view" caller. Some of the original functionality has been temporarily lost in the process of transition to htslib, but will be added back on popular demand. The original calling model can be invoked with the -c option.</help>
  <expand macro="citations" />
</tool>