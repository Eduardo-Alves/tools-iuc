<?xml version="1.0"?>
<macros>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="1.37">stacks</requirement>
            <container type="docker">quay.io/mulled/stacks:1.37--0</container>
            <yield/>
        </requirements>
    </xml>

    <token name="@WRAPPER_VERSION@">1.37</token>

    <xml name="stdio">
        <stdio>
            <exit_code range="1" level="fatal" description="Error in Stacks execution" />
        </stdio>
    </xml>

    <xml name="citation">
        <citations>
            <citation type="doi">10.1111/mec.12354</citation>
            <citation type="doi">10.1111/mec.12330</citation>
            <citation type="doi">10.1534/g3.111.000240</citation>
            <citation type="doi">10.1534/genetics.111.127324</citation>
            <citation type="doi">10.1111/j.1755-0998.2010.02967.x</citation>
            <citation type="doi">10.1073/pnas.1006538107</citation>

            <citation type="bibtex">@INPROCEEDINGS{JOBIM2013,
            author = {Le Bras, Y. and ROULT, A. and Monjeaud, C. and Bahin, M. and Quenez, O. and Heriveau, C. and Bretaudeau, A. and Sallou, O. and Collin, O.},
            title = {Towards a Life Sciences Virtual Research Environment: An e-Science initiative in Western France},
            booktitle = {JOBIM 2013 Proceedings},
            year = {2013},
            url = {https://www.e-biogenouest.org/resources/128},
            pages = {97-106}
            }</citation>
        </citations>
    </xml>

    <xml name="enzymes">
        <option value="aciI">aciI</option>
        <option value="ageI">ageI</option>
        <option value="aluI">aluI</option>
        <option value="apeKI">apeKI</option>
        <option value="apoI">apoI</option>
        <option value="aseI">aseI</option>
        <option value="bamHI">bamHI</option>
        <option value="bfaI">bfaI</option>
        <option value="bgIII">bgIII</option>
        <option value="bspDI">bspDI</option>
        <option value="bstYI">bstYI</option>
        <option value="claI">claI</option>
        <option value="ddeI">ddeI</option>
        <option value="dpnII">dpnII</option>
        <option value="eaeI">eaeI</option>
        <option value="ecoRI">ecoRI</option>
        <option value="ecoRV">ecoRV</option>
        <option value="ecoT22I">ecoT22I</option>
        <option value="hindIII">hindIII</option>
        <option value="kpnI">kpnI</option>
        <option value="mluCI">mluCI</option>
        <option value="mseI">mseI</option>
        <option value="mspI">mspI</option>
        <option value="ndeI">ndeI</option>
        <option value="nheI">nheI</option>
        <option value="nlaIII">nlaIII</option>
        <option value="notI">notI</option>
        <option value="nsiI">nsiI</option>
        <option value="pstI">pstI</option>
        <option value="rsaI">rsaI</option>
        <option value="sacI">sacI</option>
        <option value="sau3AI">sau3AI</option>
        <option value="sbfI">sbfI</option>
        <option value="sexAI">sexAI</option>
        <option value="sgrAI">sgrAI</option>
        <option value="speI">speI</option>
        <option value="sphI">sphI</option>
        <option value="taqI">taqI</option>
        <option value="xbaI">xbaI</option>
        <option value="xhoI">xhoI</option>
    </xml>

    <xml name="cross_types">
        <option value="CP">CP (F1 cross)</option>
        <option value="F2">F2 (F2 cross)</option>
        <option value="BC1">BC1 (backcross)</option>
        <option value="DH">DH (double haploid cross)</option>
        <option value="GEN">GEN (generic, unspecific to any map type)</option>
    </xml>

    <token name="@NORM_GENOTYPES_OUTPUT@">
        <![CDATA[
        ##Â We need to do this as the output file names contains the value of an option (min progeny)
        &&
        cd stacks_outputs/ &&
        ln -s batch_1.genotypes_*.loc batch_1.genotypes.loc &&
        ln -s batch_1.genotypes_*onemap.tsv batch_1.genotypes_onemap.tsv &&
        ln -s batch_1.genotypes_*.onemap.txt batch_1.genotypes.onemap.txt &&
        ln -s batch_1.genomic_*.tsv batch_1.genomic.tsv &&
        ln -s batch_1.genotypes_1.rqtl.tsv batch_1.genotypes.rqtl.tsv &&
        ln -s batch_1.haplotypes_1.tsv batch_1.haplotypes.tsv &&
        ln -s batch_1.genotypes_1.tsv batch_1.genotypes.tsv &&
        ln -s batch_1.genotypes_1.txt batch_1.genotypes.txt
        ]]>
    </token>

    <xml name="genotypes_output">
        <!-- Output formats generated by genotypes:

             JoinMap, default, only if map type is F2/BC1/DH/CP => batch_1.genotypes_1.loc
             OneMap, only if map type is F2/BC1 => batch_1.genotypes_1onemap.tsv
             OneMap/MapMaker, only if map type is CP => batch_1.genotypes_1.onemap.txt
             Genomic, for all map types => batch_1.genomic_1.tsv
             R/QTL, only if map type is F2/BC1/DH => batch_1.genotypes_1.rqtl.tsv

             Additional non-optional output (ie not altered by -o option):

             Generic format, for every map types => batch_1.haplotypes_1.tsv
             Generic format, if map type is GEN => batch_1.genotypes_1.tsv -->

        <data format="tabular" name="out_joinmap" label="Haplotypes table (JoinMap format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes.loc">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['cross_type'] in ['F2', 'BC1', 'DH', 'CP']</filter>
            <filter>options_usage['map_out_type'] == 'joinmap'</filter>
        </data>

        <data format="tabular" name="out_onemap" label="Haplotypes table (OneMap format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes_onemap.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['cross_type'] in ['F2', 'BC1']</filter>
            <filter>options_usage['map_out_type'] == 'onemap'</filter>
        </data>

        <data format="tabular" name="out_onemap_mapmaker" label="Haplotypes table (OneMap/MapMaker format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes.onemap.txt">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['cross_type'] in ['CP']</filter>
            <filter>options_usage['map_out_type'] == 'onemap'</filter>
        </data>

        <data format="tabular" name="out_genomic" label="Haplotypes table (Genomic format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genomic.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['map_out_type'] == 'genomic'</filter>
        </data>

        <data format="tabular" name="out_rqtl" label="Haplotypes table (R/QTL format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes.rqtl.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['cross_type'] in ['F2', 'BC1', 'DH']</filter>
            <filter>options_usage['map_out_type'] == 'rqtl'</filter>
        </data>

        <data format="tabular" name="out_generic_haplo" label="Haplotypes table (generic format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.haplotypes.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
        </data>
        <data format="tabular" name="out_generic_geno" label="Genotypes table (generic format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
            <filter>options_usage['cross_type'] == "GEN"</filter>
        </data>

        <data format="tabular" name="out_sql_markers" label="Markers table (Stacks SQL format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.markers.tsv">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
        </data>

        <data format="tabular" name="out_sql_genotypes" label="Haplotypes table (Stacks SQL format) with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.genotypes.txt">
            <filter>options_usage['rad_analysis_type'] == "genetic"</filter>
        </data>
    </xml>

    <xml name="populations_output">
        <data format="tabular" name="out_haplotypes" label="Observerd haplotypes with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.haplotypes.tsv">
            <filter>options_usage['rad_analysis_type'] == "population"</filter>
        </data>

        <data format="tabular" name="out_hapstats" label="Haplotype-based summary statistics for each locus in each population with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.hapstats.tsv">
            <filter>options_usage['rad_analysis_type'] == "population"</filter>
        </data>

        <data format="tabular" name="out_populations_log" label="Populations log with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.populations.log">
            <filter>options_usage['rad_analysis_type'] == "population"</filter>
        </data>

        <data format="tabular" name="out_sumstats_sum" label="Summary of summary statistics for each population with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.sumstats_summary.tsv">
            <filter>options_usage['rad_analysis_type'] == "population"</filter>
        </data>

        <data format="tabular" name="out_sumstats" label="Summary statistics for each population with ${tool.name} on ${on_string}" from_work_dir="stacks_outputs/batch_1.sumstats.tsv">
            <filter>options_usage['rad_analysis_type'] == "population"</filter>
        </data>
    </xml>

    <xml name="snp_options">
        <conditional name="select_model">
            <param name="model_type" type="select" label="Choose the model">
                <option value="snp" selected="true">SNP</option>
                <option value="bounded">Bounded SNP</option>
            </param>
            <when value="snp">
                <param name="alpha" argument="--alpha" type="select" format="float" label="Chi square significance level required to call a heterozygote or homozygote [--alpha]" >
                    <option value="0.1">0.1</option>
                    <option value="0.05" selected="True">0.05</option>
                    <option value="0.01">0.01</option>
                    <option value="0.001">0.001</option>
                </param>
            </when>
            <when value="bounded">
                <param name="bound_low" argument="--bound_low" type="float" value="0.0" min="0.0" max="1.0" label="lower bound for epsilon, the error rate [--bound_low]" help="between 0 and 1.0"/>
                <param name="bound_high" argument="--bound_high" type="float" value="1.0" min="0.0" max="1.0" label="upper bound for epsilon, the error rate [--bound_high]" help="between 0 and 1.0" />
                <param name="alpha" argument="--alpha" type="select" label="Chi square significance level required to call a heterozygote or homozygote [--alpha]" >
                    <option value="0.1">0.1</option>
                    <option value="0.05" selected="True">0.05</option>
                    <option value="0.01">0.01</option>
                    <option value="0.001">0.001</option>
                </param>
            </when>
        </conditional>
    </xml>
</macros>
