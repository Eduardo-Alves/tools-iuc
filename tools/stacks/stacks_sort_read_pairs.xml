<tool id="stacks_assembleperead" name="STACKS : assemble read pairs by locus" version="@WRAPPER_VERSION@.0">
    <description>Run the STACKS sort_read_pairs.pl and exec_velvet.pl wrappers</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <expand macro="stdio"/>
    <command><![CDATA[

        mkdir stacks_inputs reads stacks_outputs

        &&

        #for $input_file in $stacks_col:
            #set $ext = ""
            #if not str($input_file.name).endswith('.tsv'):
                #set $ext = ".tsv"
            #end if
            ln -s ${input_file} "stacks_inputs/${input_file.name}${ext}" &&
        #end for

        #for $input_file in $reads:
            ln -s ${input_file} "reads/${input_file.name}" &&
        #end for

        sort_read_pairs.pl
            -p stacks_inputs

            -s reads

            #if $whitelist:
                -w $whitelist
            #end if

            #if $threshold:
                -r $threshold
            #end if

            -o stacks_outputs
    ]]></command>
    <inputs>
        <param name="stacks_col" argument="-p" format="tabular,txt" type="data_collection" collection_type="list" label="Output from previous Stacks pipeline steps (e.g. denovo_map or refmap)" />
        <param name="reads" argument="-s" format="fastqsanger" type="data" multiple="true" label="Files containing sequences" help="Files containing parent sequences from a mapping cross" />

        <param name="whitelist" argument="-w" format="txt,tabular" type="data" optional="true" label="White list of catalog IDs to include" />
        <param name="threshold" argument="-r" type="integer" value="" optional="true" label="Minimum number of reads by locus"/>

       <!--conditional name="options_filter2">
            <param name="length_selector" type="select" label="Specify a minimum length for asssembled contigs?" >
                <option value="no" selected="true">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="no"></when>
            <when value="yes">
                <param name="threshold2" type="integer" value="200" label="Minimum length for asssembled contigs"/>
            </when>
        </conditional-->
    </inputs>
    <outputs>
        <collection name="collated" type="list" label="Collated FASTA files on ${on_string}">
            <discover_datasets pattern="(?P&lt;name&gt;.+)\.fa(sta)?" ext="fasta" directory="stacks_outputs" />
        </collection>
    </outputs>

    <tests>
        <test>
            <param name="stacks_col">
                <collection type="list">
                    <element name="batch_1.catalog.alleles.tsv" ftype="tabular" value="genotypes/batch_1.catalog.alleles.tsv" />
                    <element name="batch_1.catalog.snps.tsv" ftype="tabular" value="genotypes/batch_1.catalog.snps.tsv" />
                    <element name="batch_1.catalog.tags.tsv" ftype="tabular" value="genotypes/batch_1.catalog.tags.tsv" />
                    <element name="PopA_01.alleles.tsv" ftype="tabular" value="genotypes/PopA_01.alleles.tsv" />
                    <element name="PopA_01.matches.tsv" ftype="tabular" value="genotypes/PopA_01.matches.tsv" />
                    <element name="PopA_01.snps.tsv" ftype="tabular" value="genotypes/PopA_01.snps.tsv" />
                    <element name="PopA_01.tags.tsv" ftype="tabular" value="genotypes/PopA_01.tags.tsv" />
                    <element name="PopA_02.alleles.tsv" ftype="tabular" value="genotypes/PopA_02.alleles.tsv" />
                    <element name="PopA_02.matches.tsv" ftype="tabular" value="genotypes/PopA_02.matches.tsv" />
                    <element name="PopA_02.snps.tsv" ftype="tabular" value="genotypes/PopA_02.snps.tsv" />
                    <element name="PopA_02.tags.tsv" ftype="tabular" value="genotypes/PopA_02.tags.tsv" />
               	</collection>
            </param>
            <param name="reads" value="demultiplexed/PopA_01.1.fq,demultiplexed/PopA_01.2.fq" ftype="fastqsanger" />

            <output_collection name="collated">
                <element name="PopA_01.tags">
                    <assert_contents>
                        <has_text text="generated on " />
                    </assert_contents>
                </element>
            </output_collection>
        </test>
    </tests>

    <help>
<![CDATA[
.. class:: infomark

**What it does**

This program will run each of the Stacks sort_read_pairs.pl and exec_velvet.pl utilities to assemble pair-end reads from STACKS pipeline results

--------

**Input file**

Output from denovo_map or ref_map


**Output file**

A collated.fa file containing assembled contigs for each locus

--------

**Created by:**

Stacks was developed by Julian Catchen with contributions from Angel Amores, Paul Hohenlohe, and Bill Cresko

**Project links:**

`Stacks website <http://creskolab.uoregon.edu/stacks/>`_

`Stacks manual <http://creskolab.uoregon.edu/stacks/stacks_manual.pdf>`_

`Stacks google group <http://groups.google.com/group/stacks-users>`_
]]>
    </help>
    <expand macro="citation" />
</tool>
